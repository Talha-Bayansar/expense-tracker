// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Message {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  message    String   @default("")
  sender     User     @relation(name: "sender", fields: [senderId], references: [id])
  receiver   User     @relation(name: "receiver", fields: [receiverId], references: [id])
  senderId   String
  receiverId String
  chat       Chat     @relation(fields: [chatId], references: [id])
  chatId     String
}

model Chat {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  members   User[]
  messages  Message[]
}

model Category {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  imageUrl  String?
  ownerId   String
  owner     User      @relation(fields: [ownerId], references: [id])
  expense   Expense[]
}

model Expense {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  title      String   @default("")
  amount     Int      @default(0)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  ownerId    String
  owner      User     @relation(fields: [ownerId], references: [id])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String     @id @default(cuid())
  name             String?
  email            String?    @unique
  emailVerified    DateTime?
  image            String?
  balance          Int        @default(0)
  accounts         Account[]
  sessions         Session[]
  categories       Category[]
  expense          Expense[]
  Chat             Chat?      @relation(fields: [chatId], references: [id])
  chatId           String?
  messagesSent     Message[]  @relation(name: "sender")
  messagesReceived Message[]  @relation(name: "receiver")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
